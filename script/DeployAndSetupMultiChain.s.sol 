// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

import "forge-std/Script.sol";
import "forge-std/console.sol";

// Import your contracts (adjust paths as needed)
import "../src/variations/multichain/FixedMultiChainCaller.sol";
import "../src/variations/multichain/ChainAHandler.sol";
import "../src/variations/multichain/ChainBHandler.sol";

contract DeployAndSetupMultiChain is Script {
    // LayerZero V2 Endpoint addresses
    address constant ETH_SEPOLIA_ENDPOINT = 0x6EDCE65403992e310A62460808c4b910D972f10f;
    address constant ARB_SEPOLIA_ENDPOINT = 0x6EDCE65403992e310A62460808c4b910D972f10f;
    address constant OPT_SEPOLIA_ENDPOINT = 0x6EDCE65403992e310A62460808c4b910D972f10f;
    
    // LayerZero Endpoint IDs
    uint32 constant ETH_SEPOLIA_EID = 40161;
    uint32 constant ARB_SEPOLIA_EID = 40231;
    uint32 constant OPT_SEPOLIA_EID = 40232;
    
    // Contract instances
    FixedMultiChainCaller multiCaller;
    ChainAHandler chainAHandler;
    ChainBHandler chainBHandler;
    
    function run() external {
        // Get deployer from private key
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        address deployer = vm.addr(deployerPrivateKey);
        
        console.log("Deployer address:", deployer);
        console.log("=== DEPLOYING CONTRACTS ===");
        
        // Deploy on each chain
        deployOnEthereumSepolia(deployerPrivateKey, deployer);
        deployOnArbitrumSepolia(deployerPrivateKey, deployer);
        deployOnOptimismSepolia(deployerPrivateKey, deployer);
        
        console.log("=== SETTING UP PEERS ===");
        
        // Set up all peer relationships
        setupAllPeers(deployerPrivateKey);
        
        console.log("=== DEPLOYMENT AND SETUP COMPLETE ===");
        logContractAddresses();
    }
    
    function deployOnEthereumSepolia(uint256 privateKey, address owner) internal {
        console.log("Deploying on Ethereum Sepolia...");
        
        vm.createSelectFork(vm.envString("ETHEREUM_SEPOLIA_RPC_URL"));
        vm.startBroadcast(privateKey);
        
        multiCaller = new FixedMultiChainCaller(ETH_SEPOLIA_ENDPOINT, owner);
        
        vm.stopBroadcast();
        
        console.log("FixedMultiChainCaller deployed at:", address(multiCaller));
    }
    
    function deployOnArbitrumSepolia(uint256 privateKey, address owner) internal {
        console.log("Deploying on Arbitrum Sepolia...");
        
        vm.createSelectFork(vm.envString("ARBITRUM_SEPOLIA_RPC_URL"));
        vm.startBroadcast(privateKey);
        
        chainBHandler = new ChainBHandler(ARB_SEPOLIA_ENDPOINT, owner);
        
        vm.stopBroadcast();
        
        console.log("ChainBHandler deployed at:", address(chainBHandler));
    }
    
    function deployOnOptimismSepolia(uint256 privateKey, address owner) internal {
        console.log("Deploying on Optimism Sepolia...");
        
        vm.createSelectFork(vm.envString("OPTIMISM_SEPOLIA_RPC_URL"));
        vm.startBroadcast(privateKey);
        
        chainAHandler = new ChainAHandler(OPT_SEPOLIA_ENDPOINT, owner);
        
        vm.stopBroadcast();
        
        console.log("ChainAHandler deployed at:", address(chainAHandler));
    }
    
    function setupAllPeers(uint256 privateKey) internal {
        // Set peers on Ethereum Sepolia (MultiChainCaller)
        setupEthereumPeers(privateKey);
        
        // Set peers on Arbitrum Sepolia (ChainBHandler)
        setupArbitrumPeers(privateKey);
        
        // Set peers on Optimism Sepolia (ChainAHandler)
        setupOptimismPeers(privateKey);
    }
    
    function setupEthereumPeers(uint256 privateKey) internal {
        console.log("Setting peers on Ethereum Sepolia...");
        
        vm.createSelectFork(vm.envString("ETHEREUM_SEPOLIA_RPC_URL"));
        vm.startBroadcast(privateKey);
        
        // Set peer for Arbitrum Sepolia
        bytes32 arbPeer = addressToBytes32(address(chainBHandler));
        multiCaller.setPeer(ARB_SEPOLIA_EID, arbPeer);
        console.log("Set Arbitrum peer:", vm.toString(arbPeer));
        
        // Set peer for Optimism Sepolia
        bytes32 optPeer = addressToBytes32(address(chainAHandler));
        multiCaller.setPeer(OPT_SEPOLIA_EID, optPeer);
        console.log("Set Optimism peer:", vm.toString(optPeer));
        
        vm.stopBroadcast();
    }
    
    function setupArbitrumPeers(uint256 privateKey) internal {
        console.log("Setting peers on Arbitrum Sepolia...");
        
        vm.createSelectFork(vm.envString("ARBITRUM_SEPOLIA_RPC_URL"));
        vm.startBroadcast(privateKey);
        
        // Set peer for Ethereum Sepolia
        bytes32 ethPeer = addressToBytes32(address(multiCaller));
        chainBHandler.setPeer(ETH_SEPOLIA_EID, ethPeer);
        console.log("Set Ethereum peer:", vm.toString(ethPeer));
        
        vm.stopBroadcast();
    }
    
    function setupOptimismPeers(uint256 privateKey) internal {
        console.log("Setting peers on Optimism Sepolia...");
        
        vm.createSelectFork(vm.envString("OPTIMISM_SEPOLIA_RPC_URL"));
        vm.startBroadcast(privateKey);
        
        // Set peer for Ethereum Sepolia
        bytes32 ethPeer = addressToBytes32(address(multiCaller));
        chainAHandler.setPeer(ETH_SEPOLIA_EID, ethPeer);
        console.log("Set Ethereum peer:", vm.toString(ethPeer));
        
        vm.stopBroadcast();
    }
    
    function addressToBytes32(address _addr) internal pure returns (bytes32) {
        return bytes32(uint256(uint160(_addr)));
    }
    
    function logContractAddresses() internal view {
        console.log("\n=== CONTRACT ADDRESSES ===");
        console.log("Ethereum Sepolia - FixedMultiChainCaller:", address(multiCaller));
        console.log("Arbitrum Sepolia - ChainBHandler:", address(chainBHandler));
        console.log("Optimism Sepolia - ChainAHandler:", address(chainAHandler));
        
        console.log("\n=== ENDPOINT IDs ===");
        console.log("Ethereum Sepolia EID:", ETH_SEPOLIA_EID);
        console.log("Arbitrum Sepolia EID:", ARB_SEPOLIA_EID);
        console.log("Optimism Sepolia EID:", OPT_SEPOLIA_EID);
        
        console.log("\n=== TEST COMMANDS ===");
        console.log("# Test quote:");
        console.log(string.concat("cast call ", vm.toString(address(multiCaller)), " \"quote(uint32,string,bytes)\" 40232 \"hello\" \"0x\" --rpc-url $ETHEREUM_SEPOLIA_RPC_URL"));
        
        console.log("# Test send:");
        console.log(string.concat("cast send ", vm.toString(address(multiCaller)), " \"callBothChains(uint32,uint32,string,bytes)\" 40231 40232 \"hello\" \"0x\" --value 0.001ether --private-key $PRIVATE_KEY --rpc-url $ETHEREUM_SEPOLIA_RPC_URL"));
    }
}